FROM spiralscout/roadrunner:2024.1 AS roadrunner
FROM $PARENT_IMAGE

ARG USER=backend
ARG GROUP=backend
ARG UID=1000
ARG GID=1000

ENV \
    PS1='\[\033[1;32m\]\[\033[1;36m\][\u@\h] \[\033[1;34m\]\w\[\033[0;35m\] \[\033[1;36m\]# \[\033[0m\]' \
    COMPOSER_HOME="/tmp/composer" \
    OWN_SSL_CERT_DIR="/ssl-cert" \
    OWN_SSL_CERT_LIFETIME=1095 \
    XDEBUG_VERSION="3.3.2" \
    GOSU_VERSION="1.17"

# persistent / runtime deps
ENV PHPIZE_DEPS \
    libc-dev \
    pcre-dev \
    autoconf \
    openssl \
    make \
    g++ \
    gcc

RUN set -xe \
    && apk add --no-cache --virtual .build-deps ${PHPIZE_DEPS} \
    && pecl install xdebug-${XDEBUG_VERSION}  \
    && mkdir -p /var/www/html/xdebug \
        && { \
                echo "xdebug.mode=debug"; \
                echo "xdebug.start_with_request=yes"; \
                echo "xdebug.client_host=host.docker.internal"; \
                echo "xdebug.client_port=9003"; \
                echo "xdebug.log_level=0"; \
                echo "xdebug.log=/var/www/html/xdebug/xdebug.log"; \
            } > /usr/local/etc/php/conf.d/xdebug.ini \
    && docker-php-ext-enable xdebug \
    && mkdir -p ${OWN_SSL_CERT_DIR} \
        && cd ${OWN_SSL_CERT_DIR} \
        && openssl genrsa -passout pass:x -out self-signed.key 2048 \
        && cp self-signed.key self-signed.key.orig \
        && openssl rsa -passin pass:x -in self-signed.key.orig -out self-signed.key \
        && openssl req -new -key self-signed.key -out cert.csr \
            -subj "/C=RU/ST=RU/L=Somewhere/O=SomeOrg/OU=IT Department/CN=example.com" \
        && openssl x509 -req -days ${OWN_SSL_CERT_LIFETIME} -in cert.csr -signkey self-signed.key -out self-signed.crt \
        && ls -lh

RUN mkdir -p /app && adduser --uid "$UID" -D -h /app -s /bin/bash -g "$GROUP" "$USER" && echo "$USER:som3lo0gpassw@rdz" | chpasswd

RUN set -eux; \
	apk add --no-cache --virtual .gosu-deps \
		ca-certificates \
		dpkg \
		gnupg \
	; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	\
# verify the signature
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	\
# clean up fetch dependencies
	apk del --no-network .gosu-deps; \
	\
	chmod +x /usr/local/bin/gosu; \
# verify that the binary works
	gosu --version; \
	gosu nobody true

RUN ls -la

COPY ./bin/ /app/bin/
COPY ./config/ /app/config/
COPY ./public/ /app/public/
COPY ./tests/ /app/tests/
COPY ./src/ /app/src/
COPY ./.rr.dev.yaml /app/.rr.dev.yaml
COPY ./symfony.lock /app/symfony.lock
COPY ./composer.* /app/
COPY ./.env /app/.env

COPY ./docker/shared/keep-alive.sh /usr/local/bin/keep-alive.sh
COPY ./docker/app/entry/entrypoint-dev.sh /usr/local/bin/entrypoint
RUN chmod +x /usr/local/bin/entrypoint

COPY --from=roadrunner /usr/bin/rr /usr/bin/rr

WORKDIR /app

EXPOSE 80
EXPOSE 443
VOLUME ["/app"]

# repass root for using gosu in the future
USER root

ENTRYPOINT ["/usr/local/bin/entrypoint"]
CMD ["rr", "serve", "--debug", "-c", "/app/.rr.dev.yaml"]
